#pragma once

#include "glad/glad.h"
#include <assimp/material.h>
#include <stb/stb_image.h>

#include <string>
#include <vector>
#include <map>

class Texture
{
public:
	/**
	 * @brief Loads the texture in m_map if it does not already exist
	 *
	 * @param flipTextures True if the texture image should be flipped
	 * when loaded with stb
	 */
	static void loadTextureInMemory(std::string, aiTextureType, bool flipTextures);

	/**
	 * @brief Loads and return the texture corresponding to the given file name.
	 *
	 * Calls the @ref loadTextureInMemory function to add the texture
	 * to the map if it does not already exist.
	 *
	 *
	 * @param filename
	 * @param texture_type The type of the texture (Diffuse, Specular, ...)
	 * @param flipTextures True if the texture image should be flipped
	 * when loaded with stb
	 * @return Texture
	 */
	static Texture getTextureFromFile(std::string filename, aiTextureType texture_type, bool flipTextures);

	/**
	 * @brief Loads all the textures specified in paths for a Cubemap object
	 *
	 * @param paths The paths to the textures
	 * @return Texture
	 */
	static Texture loadCubemap(std::vector<std::string> paths);

	/**
	 * @brief Get the Type of the texture
	 * All different types of texture are specified in the material header of the assimp library
	 * 
	 * @return aiTextureType
	 */
	aiTextureType getType();

	/**
	 * @brief Returns the ID of the texture generated by opengl
	 *
	 * @return GLuint
	 */
	GLuint getID();
	Texture();

private:
	/**
	 * @brief Construct a new Texture object
	 * 
	 * @note Textures parameters are set to GL_REPEAT for S and T
	 * and GL_LINEAR_MIPMAP_LINEAR for the Mipmap min filter
	 * 
	 * @param texture_type 
	 * @param flipTextures 
	 */
	Texture(std::string path, aiTextureType texture_type, bool flipTextures);

	GLuint m_ID;
	aiTextureType m_texture_type;
	std::string m_filename;
	static std::map<std::string, Texture> m_map;
};